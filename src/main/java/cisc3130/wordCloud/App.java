package cisc3130.wordCloud;
import com.kennycason.kumo.nlp.FrequencyAnalyzer;
import com.kennycason.kumo.nlp.FrequencyFileLoader;
import com.kennycason.kumo.nlp.normalize.BubbleTextNormalizer;
import com.kennycason.kumo.nlp.normalize.Normalizer;
import com.kennycason.kumo.palette.ColorPalette;
import com.kennycason.kumo.bg.Background;
import com.kennycason.kumo.bg.RectangleBackground;
import com.kennycason.kumo.bg.PixelBoundryBackground;
import com.kennycason.kumo.CollisionMode;
import com.kennycason.kumo.WordCloud;
import com.kennycason.kumo.WordFrequency;
import com.kennycason.kumo.font.scale.LinearFontScalar;

import static java.util.stream.Collectors.toMap;

import java.awt.*;
import java.io.*;
import java.util.*;

/**
 * Hello world!
 *
 */
public class App 
{
    public static void main( String[] args ) throws IOException
    {
    	Scanner scanner = new Scanner(new File("lyrics.txt"));
		wordFrequencies(scanner);
		
		final FrequencyAnalyzer frequencyAnalyzer = new FrequencyAnalyzer();
        frequencyAnalyzer.setWordFrequenciesToReturn(300);
        frequencyAnalyzer.setMinWordLength(2);
        
        //read from output file generated by my wordFrequencies method
        FrequencyFileLoader FrequencyFileLoader = new FrequencyFileLoader();
        final java.util.List<WordFrequency> wordFrequencies = FrequencyFileLoader.load(new File("output.txt"));


        final Dimension dimension = new Dimension(800, 800);
        final WordCloud wordCloud = new WordCloud(dimension, CollisionMode.PIXEL_PERFECT);
        wordCloud.setPadding(2);
        wordCloud.setBackground(new PixelBoundryBackground("vec.png"));
        wordCloud.setBackgroundColor((Color.BLACK));
        wordCloud.setColorPalette(new ColorPalette((Color.RED), (Color.PINK), (Color.WHITE)));

        wordCloud.setFontScalar(new LinearFontScalar(40, 10));

        wordCloud.build(wordFrequencies);
        wordCloud.writeToFile("image.png");
    }
    
    public static void wordFrequencies(Scanner scanner) throws FileNotFoundException {
    	PrintWriter output = new PrintWriter("output.txt");
		HashMap<String, Integer> map = new HashMap<String, Integer>();
		while(scanner.hasNext()) {
			String word = scanner.next().toLowerCase();
			if(!map.containsKey(word)) {
				int i = 1;
				map.put(word, i);
			}
			else {
				int i = map.get(word);
				map.put(word, i+1);
			}
		}
		
		//sorts values of map in descending order
		HashMap<String, Integer> sorted = map.entrySet()
				.stream()
				.sorted(Collections.reverseOrder(Map.Entry.comparingByValue()))
				.collect(toMap(Map.Entry::getKey, Map.Entry::getValue, (e1, e2) -> e2, LinkedHashMap::new));

		sorted.forEach((k,v)-> output.println(v+": "+k));

		output.close();
	}
	
}
